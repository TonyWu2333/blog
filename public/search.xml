<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网络协议基本知识</title>
      <link href="/2024/09/03/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
      <url>/2024/09/03/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="网络协议基本知识"><a href="#网络协议基本知识" class="headerlink" title="网络协议基本知识"></a>网络协议基本知识</h1><h1 id="HTTP版本"><a href="#HTTP版本" class="headerlink" title="HTTP版本"></a>HTTP版本</h1><h2 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP&#x2F;1.0"></a>HTTP&#x2F;1.0</h2><p>HTTP 正式作为标准被公布是在 1996 年的 5 月，版本被命名为 HTTP&#x2F;1.0，并记载于 RFC1945。虽说是初期标准，但该协议标准至今仍 被广泛使用在服务器端。<br><a href="https://www.ietf.org/rfc/rfc1945.txt">https://www.ietf.org/rfc/rfc1945.txt</a></p><h2 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP&#x2F;1.1"></a>HTTP&#x2F;1.1</h2><p>1997 年 1 月公布的 HTTP&#x2F;1.1 是目前主流的 HTTP 协议版本。当初 的标准是 RFC2068，之后发布的修订版 RFC2616 就是当前最广泛使用的版本。<br><a href="https://www.ietf.org/rfc/rfc2616.txt">https://www.ietf.org/rfc/rfc2616.txt</a></p><h2 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP&#x2F;2.0"></a>HTTP&#x2F;2.0</h2><p>2015年HTTP&#x2F;2.0正式发表。<br><a href="https://www.ietf.org/rfc/rfc7540.txt">https://www.ietf.org/rfc/rfc7540.txt</a></p><h1 id="TCP-IP协议族"><a href="#TCP-IP协议族" class="headerlink" title="TCP&#x2F;IP协议族"></a>TCP&#x2F;IP协议族</h1><p>与互联网相关联的协议集合起来总称为TCP&#x2F;IP。<br>网络是在TCP&#x2F;IP协议族的基础上运作的，而HTTP属于它的一个子集。</p><h2 id="TCP-IP的分层"><a href="#TCP-IP的分层" class="headerlink" title="TCP&#x2F;IP的分层"></a>TCP&#x2F;IP的分层</h2><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>各类通用的应用服务。<br>如 FTP、DNS、HTTP。</p><h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。<br> 如 TCP（Transmission Control Protocol，传输控制协议）和 UDP（User Data Protocol，用户数据 报协议）</p><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方。  </p><h3 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h3><p> 用来处理连接网络的硬件部分。</p><h2 id="TCP-IP通信传输流"><a href="#TCP-IP通信传输流" class="headerlink" title="TCP&#x2F;IP通信传输流"></a>TCP&#x2F;IP通信传输流</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673157649634-65e31c47-9623-4562-b008-6dadf767459b.png" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673157649634-65e31c47-9623-4562-b008-6dadf767459b.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><p>这种把数据包装起来的做法叫做<strong>封装</strong>。</p><h1 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h1><p>IP实际上指IP协议的名称，注意不要搞混IP和IP地址。<br>IP协议的作用是把各种数据包传送给对方。而要保证确实传送到对方那里，则需要满足各类条件。其中两个重要的条件是 <strong>IP 地址</strong>和 <strong>MAC 地址</strong>（Media Access Control Address）<br>IP 地址指明了节点被分配到的地址，MAC 地址是指网卡所属的固定地址。IP 地址可以和 MAC 地址进行配对。IP 地址<strong>可变换</strong>，但 MAC 地址<strong>基本上不会更改</strong>。 </p><h1 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h1><p>IP 间的通信依赖 MAC 地址。在网络上，通信的双方在同一局域网 （LAN）内的情况是很少的，通常是经过多台计算机和网络设备中转才 能连接到对方。而在进行中转时，会利用下一站中转设备的 MAC 地址来搜索下一个中转目标。这时，会采用 <strong>ARP 协议</strong>（Address Resolution Protocol）。ARP 是一种用以解析地址的协议，根据通信方的 IP 地址就可以反查出对应的 MAC 地址。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673158833602-f19296ab-8ed4-4838-aa0b-c136edea4f14.png#averageHue=%23fdfcfc&clientId=u32997a6a-1889-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=726&id=u4f620d9d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1089&originWidth=1269&originalType=binary&ratio=1&rotation=0&showTitle=false&size=372941&status=done&style=none&taskId=ub5293f37-9cbb-45fe-a792-6508becfc2c&title=&width=846" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673158833602-f19296ab-8ed4-4838-aa0b-c136edea4f14.png#averageHue=%23fdfcfc&clientId=u32997a6a-1889-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=726&id=u4f620d9d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1089&originWidth=1269&originalType=binary&ratio=1&rotation=0&showTitle=false&size=372941&status=done&style=none&taskId=ub5293f37-9cbb-45fe-a792-6508becfc2c&title=&width=846" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h1 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h1><p> TCP 位于传输层，提供可靠的字节流服务。<br><strong>字节流服务</strong>是指，为了方便传输， 将大块数据<strong>分割</strong>成以报文段（segment）为单位的<strong>数据包</strong>进行管理。TCP 协议为了更容易传送大数据才把数据分割，而且 TCP 协议能够确认数据最终是否送达到对方。<br>为了准确无误地将数据送达目标处，TCP 协议采用了三次握手策略<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673159081931-37fffd3e-1347-4e02-b541-391245042878.png#averageHue=%23fdfdfc&clientId=u32997a6a-1889-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=441&id=u6d57fe6c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=661&originWidth=1214&originalType=binary&ratio=1&rotation=0&showTitle=false&size=231695&status=done&style=none&taskId=u9fe0e3a0-b141-40fa-820d-04406d5ca7c&title=&width=809.3333333333334" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673159081931-37fffd3e-1347-4e02-b541-391245042878.png#averageHue=%23fdfdfc&clientId=u32997a6a-1889-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=441&id=u6d57fe6c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=661&originWidth=1214&originalType=binary&ratio=1&rotation=0&showTitle=false&size=231695&status=done&style=none&taskId=u9fe0e3a0-b141-40fa-820d-04406d5ca7c&title=&width=809.3333333333334" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发送相同的数据包。</p><h1 id="DNS协议"><a href="#DNS协议" class="headerlink" title="DNS协议"></a>DNS协议</h1><p>DNS 协议提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。 </p><h1 id="各协议与HTTP的关系"><a href="#各协议与HTTP的关系" class="headerlink" title="各协议与HTTP的关系"></a>各协议与HTTP的关系</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673159364800-f9a3b663-a56c-41c2-a197-40649e883d7b.png#averageHue=%23fcfbfa&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=925&id=u020f2e43&margin=%5Bobject%20Object%5D&name=image.png&originHeight=966&originWidth=654&originalType=binary&ratio=1&rotation=0&showTitle=false&size=207969&status=done&style=none&taskId=ua4e7d0e1-1c40-4422-920d-6295848f214&title=&width=626" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673159364800-f9a3b663-a56c-41c2-a197-40649e883d7b.png#averageHue=%23fcfbfa&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=925&id=u020f2e43&margin=%5Bobject%20Object%5D&name=image.png&originHeight=966&originWidth=654&originalType=binary&ratio=1&rotation=0&showTitle=false&size=207969&status=done&style=none&taskId=ua4e7d0e1-1c40-4422-920d-6295848f214&title=&width=626" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h1 id="URL和URI"><a href="#URL和URI" class="headerlink" title="URL和URI"></a>URL和URI</h1><p>URI（ Uniform Resource Identifier  统一资源标识符）<br>URL （Uniform Resource Locator 统一资源定位符）<br>其中URI包含URL</p><h2 id="URI格式"><a href="#URI格式" class="headerlink" title="URI格式"></a>URI格式</h2><p>绝对URI的格式如下<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673159918341-7a44606f-0f20-4d76-8a23-0f50dbb4e952.png#averageHue=%23fcfaf8&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=125&id=u5e7b0c91&margin=%5Bobject%20Object%5D&name=image.png&originHeight=184&originWidth=928&originalType=binary&ratio=1&rotation=0&showTitle=false&size=51692&status=done&style=none&taskId=u74dc285f-d3e8-407c-a57a-fa4d3e1f2a1&title=&width=631.6666870117188" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673159918341-7a44606f-0f20-4d76-8a23-0f50dbb4e952.png#averageHue=%23fcfaf8&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=125&id=u5e7b0c91&margin=%5Bobject%20Object%5D&name=image.png&originHeight=184&originWidth=928&originalType=binary&ratio=1&rotation=0&showTitle=false&size=51692&status=done&style=none&taskId=u74dc285f-d3e8-407c-a57a-fa4d3e1f2a1&title=&width=631.6666870117188" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h1 id="HTTP中的方法"><a href="#HTTP中的方法" class="headerlink" title="HTTP中的方法"></a>HTTP中的方法</h1><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673160695782-cb8b6783-1f49-4606-95ea-61483838887d.png#averageHue=%23fdfdfd&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=223&id=u9b8d91f0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=335&originWidth=885&originalType=binary&ratio=1&rotation=0&showTitle=false&size=84024&status=done&style=none&taskId=u31e7e375-6323-4e18-b60b-46c46dd6996&title=&width=590" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673160695782-cb8b6783-1f49-4606-95ea-61483838887d.png#averageHue=%23fdfdfd&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=223&id=u9b8d91f0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=335&originWidth=885&originalType=binary&ratio=1&rotation=0&showTitle=false&size=84024&status=done&style=none&taskId=u31e7e375-6323-4e18-b60b-46c46dd6996&title=&width=590" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673160704946-3a25c163-622c-4739-979e-e4ec0e483c20.png#averageHue=%23fdfdfd&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=225&id=u87df6763&margin=%5Bobject%20Object%5D&name=image.png&originHeight=338&originWidth=914&originalType=binary&ratio=1&rotation=0&showTitle=false&size=85182&status=done&style=none&taskId=ufe6d3fbd-a1ef-4d09-a3ce-25430790d71&title=&width=609.3333333333334" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673160704946-3a25c163-622c-4739-979e-e4ec0e483c20.png#averageHue=%23fdfdfd&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=225&id=u87df6763&margin=%5Bobject%20Object%5D&name=image.png&originHeight=338&originWidth=914&originalType=binary&ratio=1&rotation=0&showTitle=false&size=85182&status=done&style=none&taskId=ufe6d3fbd-a1ef-4d09-a3ce-25430790d71&title=&width=609.3333333333334" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673160714886-fbc5e176-1018-4b22-96f5-6a2208880120.png#averageHue=%23fdfdfd&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=213&id=u5ed95862&margin=%5Bobject%20Object%5D&name=image.png&originHeight=320&originWidth=884&originalType=binary&ratio=1&rotation=0&showTitle=false&size=87620&status=done&style=none&taskId=u93bad453-a513-4975-a7f7-709fc81e6e7&title=&width=589.3333333333334" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673160714886-fbc5e176-1018-4b22-96f5-6a2208880120.png#averageHue=%23fdfdfd&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=213&id=u5ed95862&margin=%5Bobject%20Object%5D&name=image.png&originHeight=320&originWidth=884&originalType=binary&ratio=1&rotation=0&showTitle=false&size=87620&status=done&style=none&taskId=u93bad453-a513-4975-a7f7-709fc81e6e7&title=&width=589.3333333333334" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673160728186-a0a4da47-0cdd-464f-bd98-37f4a71b4aeb.png#averageHue=%23fefdfd&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=243&id=u9ce446a2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=364&originWidth=916&originalType=binary&ratio=1&rotation=0&showTitle=false&size=88124&status=done&style=none&taskId=ud81898f8-6ee7-4712-8905-b64f572e739&title=&width=610.6666666666666" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673160728186-a0a4da47-0cdd-464f-bd98-37f4a71b4aeb.png#averageHue=%23fefdfd&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=243&id=u9ce446a2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=364&originWidth=916&originalType=binary&ratio=1&rotation=0&showTitle=false&size=88124&status=done&style=none&taskId=ud81898f8-6ee7-4712-8905-b64f572e739&title=&width=610.6666666666666" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673160741619-9ee59ae6-2680-4053-8f4f-05f2bcc9f699.png#averageHue=%23fdfdfd&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=213&id=u95249674&margin=%5Bobject%20Object%5D&name=image.png&originHeight=320&originWidth=878&originalType=binary&ratio=1&rotation=0&showTitle=false&size=93912&status=done&style=none&taskId=u7e12b661-7b1c-4f12-8d89-3cd35ec00ca&title=&width=585.3333333333334" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673160741619-9ee59ae6-2680-4053-8f4f-05f2bcc9f699.png#averageHue=%23fdfdfd&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=213&id=u95249674&margin=%5Bobject%20Object%5D&name=image.png&originHeight=320&originWidth=878&originalType=binary&ratio=1&rotation=0&showTitle=false&size=93912&status=done&style=none&taskId=u7e12b661-7b1c-4f12-8d89-3cd35ec00ca&title=&width=585.3333333333334" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673160750706-fb50c57e-4560-4d8b-9cd1-a3f7946448ce.png#averageHue=%23fdfdfd&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=213&id=u67491c9e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=320&originWidth=1001&originalType=binary&ratio=1&rotation=0&showTitle=false&size=99918&status=done&style=none&taskId=u5fb249c7-f3e0-492d-a6ac-1e769001f22&title=&width=667.3333333333334" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673160750706-fb50c57e-4560-4d8b-9cd1-a3f7946448ce.png#averageHue=%23fdfdfd&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=213&id=u67491c9e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=320&originWidth=1001&originalType=binary&ratio=1&rotation=0&showTitle=false&size=99918&status=done&style=none&taskId=u5fb249c7-f3e0-492d-a6ac-1e769001f22&title=&width=667.3333333333334" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673160781535-2dc3ad79-2dd5-4a9c-8eba-bf95c0cff1f2.png#averageHue=%23fcfbfb&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=263&id=u67c70893&margin=%5Bobject%20Object%5D&name=image.png&originHeight=394&originWidth=1037&originalType=binary&ratio=1&rotation=0&showTitle=false&size=196146&status=done&style=none&taskId=u3e523aa2-023d-430b-ad3c-6fa19d182d2&title=&width=691.3333333333334" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673160781535-2dc3ad79-2dd5-4a9c-8eba-bf95c0cff1f2.png#averageHue=%23fcfbfb&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=263&id=u67c70893&margin=%5Bobject%20Object%5D&name=image.png&originHeight=394&originWidth=1037&originalType=binary&ratio=1&rotation=0&showTitle=false&size=196146&status=done&style=none&taskId=u3e523aa2-023d-430b-ad3c-6fa19d182d2&title=&width=691.3333333333334" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673160790913-2e822b28-39d1-4ed5-92ed-2b6a4b1af431.png#averageHue=%23cdb397&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=236&id=u410964c9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=354&originWidth=1013&originalType=binary&ratio=1&rotation=0&showTitle=false&size=143449&status=done&style=none&taskId=ue64445f0-e75a-4f0c-acb1-193227b9e4a&title=&width=675.3333333333334" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673160790913-2e822b28-39d1-4ed5-92ed-2b6a4b1af431.png#averageHue=%23cdb397&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=236&id=u410964c9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=354&originWidth=1013&originalType=binary&ratio=1&rotation=0&showTitle=false&size=143449&status=done&style=none&taskId=ue64445f0-e75a-4f0c-acb1-193227b9e4a&title=&width=675.3333333333334" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>CONNECT 方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行 TCP 通信。主要使用 SSL（Secure Sockets Layer，安全套接 层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输 。</p><h1 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673160962789-7f3e5fbf-6c8d-4d00-9401-ce72cb894a59.png#averageHue=%23bda27d&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=541&id=u3fc35fb1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=812&originWidth=1055&originalType=binary&ratio=1&rotation=0&showTitle=false&size=179936&status=done&style=none&taskId=ua251f7f8-41a5-4e41-a225-9772f18324b&title=&width=703.3333333333334" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673160962789-7f3e5fbf-6c8d-4d00-9401-ce72cb894a59.png#averageHue=%23bda27d&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=541&id=u3fc35fb1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=812&originWidth=1055&originalType=binary&ratio=1&rotation=0&showTitle=false&size=179936&status=done&style=none&taskId=ua251f7f8-41a5-4e41-a225-9772f18324b&title=&width=703.3333333333334" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h1 id="管线化"><a href="#管线化" class="headerlink" title="管线化"></a>管线化</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673161038631-9a7cccc0-6170-4992-a342-5dba58a601b9.png#averageHue=%23ccb28d&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=319&id=u6af808a8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=478&originWidth=1017&originalType=binary&ratio=1&rotation=0&showTitle=false&size=147506&status=done&style=none&taskId=u5a1d83dc-d017-4cc4-b608-8a2083481f3&title=&width=678" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673161038631-9a7cccc0-6170-4992-a342-5dba58a601b9.png#averageHue=%23ccb28d&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=319&id=u6af808a8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=478&originWidth=1017&originalType=binary&ratio=1&rotation=0&showTitle=false&size=147506&status=done&style=none&taskId=u5a1d83dc-d017-4cc4-b608-8a2083481f3&title=&width=678" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>Cookie会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器 发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。<br>服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。  </p><h1 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673161365382-c42c9d06-bebf-46e2-87f3-1b33eaa9710a.png#averageHue=%23d1b48e&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=229&id=u0e9069b5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=343&originWidth=1051&originalType=binary&ratio=1&rotation=0&showTitle=false&size=79567&status=done&style=none&taskId=u6b57d926-2e42-4d12-b7ea-0fe2b41a468&title=&width=700.6666666666666" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673161365382-c42c9d06-bebf-46e2-87f3-1b33eaa9710a.png#averageHue=%23d1b48e&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=229&id=u0e9069b5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=343&originWidth=1051&originalType=binary&ratio=1&rotation=0&showTitle=false&size=79567&status=done&style=none&taskId=u6b57d926-2e42-4d12-b7ea-0fe2b41a468&title=&width=700.6666666666666" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673161485453-8bdeff9d-e95d-406a-8998-caf9df75ffca.png#averageHue=%23a0c0a2&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=153&id=ua8fe2c7f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=230&originWidth=1016&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34202&status=done&style=none&taskId=u469e2410-1f12-44a2-b47f-61291cb923f&title=&width=677.3333333333334" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673161485453-8bdeff9d-e95d-406a-8998-caf9df75ffca.png#averageHue=%23a0c0a2&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=153&id=ua8fe2c7f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=230&originWidth=1016&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34202&status=done&style=none&taskId=u469e2410-1f12-44a2-b47f-61291cb923f&title=&width=677.3333333333334" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h2><p>包含用于请求的方法，请求 URI 和 HTTP 版本。 </p><h2 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h2><p>包含表明响应结果的状态码，原因短语和 HTTP 版本。  </p><h2 id="首部字段"><a href="#首部字段" class="headerlink" title="首部字段"></a>首部字段</h2><p>包含表示请求和响应的各种条件和属性的各类首部。</p><h1 id="范围请求"><a href="#范围请求" class="headerlink" title="范围请求"></a>范围请求</h1><p>执行范围请求时，会用到首部字段 Range 来指定资源的 byte 范围。 byte 范围的指定形式如下。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//5001~10 000 字节</span><br><span class="line">Range: bytes=5001-10000 </span><br><span class="line">//从 5001 字节之后全部的</span><br><span class="line">Range: bytes=5001-</span><br><span class="line">//从一开始到 3000 字节和 5000~7000 字节的多重范围</span><br><span class="line">Range: bytes=-3000, 5000-7000</span><br></pre></td></tr></table></figure><p>针对范围请求，响应会返回状态码为 206 Partial Content 的响应报 文。另外，对于多重范围的范围请求，响应会在首部字段 Content-Type 标明 multipart&#x2F;byteranges 后返回响应报文。 如果服务器端无法响应范围请求，则会返回状态码 200 OK 和完整 的实体内容 。</p><h1 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h1><table><thead><tr><th>1XX</th><th>Informational（信息性状态码）</th><th>接收的请求正在处理</th></tr></thead><tbody><tr><td>2XX</td><td>Success（成功状态码）</td><td>请求正常处理完毕</td></tr><tr><td>3XX</td><td>Redirection（重定向状态码）</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4XX</td><td>Client Error（客户端错误状态码）</td><td>服务器无法处理请求</td></tr><tr><td>5XX</td><td>Server Error（服务器错误状态码）</td><td>服务器处理请求出错</td></tr></tbody></table><h2 id="200-OK"><a href="#200-OK" class="headerlink" title="200 OK"></a>200 OK</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673162565201-8394f397-8bc8-4317-984e-06ddd133cf3a.png#averageHue=%23fdfcfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=201&id=u060c4390&margin=%5Bobject%20Object%5D&name=image.png&originHeight=301&originWidth=938&originalType=binary&ratio=1&rotation=0&showTitle=false&size=107549&status=done&style=none&taskId=u9b745166-0404-4bce-ad8e-30d9f47e352&title=&width=625.3333333333334" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673162565201-8394f397-8bc8-4317-984e-06ddd133cf3a.png#averageHue=%23fdfcfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=201&id=u060c4390&margin=%5Bobject%20Object%5D&name=image.png&originHeight=301&originWidth=938&originalType=binary&ratio=1&rotation=0&showTitle=false&size=107549&status=done&style=none&taskId=u9b745166-0404-4bce-ad8e-30d9f47e352&title=&width=625.3333333333334" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="204-No-content"><a href="#204-No-content" class="headerlink" title="204 No content"></a>204 No content</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673162576598-9eda4176-61be-4ba7-9f75-435ce0958640.png#averageHue=%23fdfcfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=202&id=u8adcfd2f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=303&originWidth=867&originalType=binary&ratio=1&rotation=0&showTitle=false&size=94033&status=done&style=none&taskId=ud08825df-6ec3-4fd0-b5b7-6b01082dacb&title=&width=578" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673162576598-9eda4176-61be-4ba7-9f75-435ce0958640.png#averageHue=%23fdfcfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=202&id=u8adcfd2f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=303&originWidth=867&originalType=binary&ratio=1&rotation=0&showTitle=false&size=94033&status=done&style=none&taskId=ud08825df-6ec3-4fd0-b5b7-6b01082dacb&title=&width=578" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="206-Partial-Content"><a href="#206-Partial-Content" class="headerlink" title="206 Partial Content"></a>206 Partial Content</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673162647501-8b21b61a-059b-46ee-bb32-8bef8d146581.png#averageHue=%23fcfcfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=194&id=ube6c5941&margin=%5Bobject%20Object%5D&name=image.png&originHeight=291&originWidth=869&originalType=binary&ratio=1&rotation=0&showTitle=false&size=100971&status=done&style=none&taskId=u69ad21e9-3d86-40bc-b6ec-1e82885d8a8&title=&width=579.3333333333334" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673162647501-8b21b61a-059b-46ee-bb32-8bef8d146581.png#averageHue=%23fcfcfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=194&id=ube6c5941&margin=%5Bobject%20Object%5D&name=image.png&originHeight=291&originWidth=869&originalType=binary&ratio=1&rotation=0&showTitle=false&size=100971&status=done&style=none&taskId=u69ad21e9-3d86-40bc-b6ec-1e82885d8a8&title=&width=579.3333333333334" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 Moved Permanently"></a>301 Moved Permanently</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673162691255-45b21454-b7bf-4dd4-b317-7c196410447e.png#averageHue=%23fdfcfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=211&id=ud442b13c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=317&originWidth=920&originalType=binary&ratio=1&rotation=0&showTitle=false&size=110635&status=done&style=none&taskId=u9730727f-08e9-4044-a517-d85932e48bc&title=&width=613.3333333333334" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673162691255-45b21454-b7bf-4dd4-b317-7c196410447e.png#averageHue=%23fdfcfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=211&id=ud442b13c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=317&originWidth=920&originalType=binary&ratio=1&rotation=0&showTitle=false&size=110635&status=done&style=none&taskId=u9730727f-08e9-4044-a517-d85932e48bc&title=&width=613.3333333333334" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="302-Found"><a href="#302-Found" class="headerlink" title="302 Found"></a>302 Found</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673162796087-b59c688c-e58b-4d8d-82a2-73356a758ff5.png#averageHue=%23fdfcfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=248&id=ua783ff79&margin=%5Bobject%20Object%5D&name=image.png&originHeight=372&originWidth=899&originalType=binary&ratio=1&rotation=0&showTitle=false&size=110394&status=done&style=none&taskId=u4075d13a-d280-4438-ae91-e75d1ede8ea&title=&width=599.3333333333334" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673162796087-b59c688c-e58b-4d8d-82a2-73356a758ff5.png#averageHue=%23fdfcfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=248&id=ua783ff79&margin=%5Bobject%20Object%5D&name=image.png&originHeight=372&originWidth=899&originalType=binary&ratio=1&rotation=0&showTitle=false&size=110394&status=done&style=none&taskId=u4075d13a-d280-4438-ae91-e75d1ede8ea&title=&width=599.3333333333334" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="303-See-other"><a href="#303-See-other" class="headerlink" title="303 See other"></a>303 See other</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673162865830-b763e89f-c69f-4567-bbef-543815bf558c.png#averageHue=%23fdfcfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=242&id=u91074649&margin=%5Bobject%20Object%5D&name=image.png&originHeight=363&originWidth=842&originalType=binary&ratio=1&rotation=0&showTitle=false&size=105842&status=done&style=none&taskId=u0bee592a-30db-419d-b823-5b8a5536d84&title=&width=561.3333333333334" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673162865830-b763e89f-c69f-4567-bbef-543815bf558c.png#averageHue=%23fdfcfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=242&id=u91074649&margin=%5Bobject%20Object%5D&name=image.png&originHeight=363&originWidth=842&originalType=binary&ratio=1&rotation=0&showTitle=false&size=105842&status=done&style=none&taskId=u0bee592a-30db-419d-b823-5b8a5536d84&title=&width=561.3333333333334" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br>303 状态码和 302 Found 状态码有着相同的功能，但 303 状态码明确表示客户端应当采用 GET 方法获取资源，这点与 302 状态码有区别。  </p><h2 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a>304 Not Modified</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673162958764-822cdc8e-4091-4bb0-922c-28fc8832e75b.png#averageHue=%23fdfdfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=238&id=u1fd96773&margin=%5Bobject%20Object%5D&name=image.png&originHeight=357&originWidth=871&originalType=binary&ratio=1&rotation=0&showTitle=false&size=101577&status=done&style=none&taskId=u54c0f75e-034a-4921-863f-51348982813&title=&width=580.6666666666666" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673162958764-822cdc8e-4091-4bb0-922c-28fc8832e75b.png#averageHue=%23fdfdfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=238&id=u1fd96773&margin=%5Bobject%20Object%5D&name=image.png&originHeight=357&originWidth=871&originalType=binary&ratio=1&rotation=0&showTitle=false&size=101577&status=done&style=none&taskId=u54c0f75e-034a-4921-863f-51348982813&title=&width=580.6666666666666" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="307-Temporary-Redirect"><a href="#307-Temporary-Redirect" class="headerlink" title="307 Temporary Redirect"></a>307 Temporary Redirect</h2><p>临时重定向。该状态码与 302 Found 有着相同的含义。尽管 302 标 准禁止 POST 变换成 GET，但实际使用时大家并不遵守 。</p><h2 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673163056382-afa03cde-887b-4f1f-87dd-855381564681.png#averageHue=%23fdfdfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=211&id=u15fb3c9f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=317&originWidth=809&originalType=binary&ratio=1&rotation=0&showTitle=false&size=93441&status=done&style=none&taskId=u4ab9f1af-a3c8-4951-a900-14f9d4bc933&title=&width=539.3333333333334" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673163056382-afa03cde-887b-4f1f-87dd-855381564681.png#averageHue=%23fdfdfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=211&id=u15fb3c9f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=317&originWidth=809&originalType=binary&ratio=1&rotation=0&showTitle=false&size=93441&status=done&style=none&taskId=u4ab9f1af-a3c8-4951-a900-14f9d4bc933&title=&width=539.3333333333334" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673163099589-171954fd-a034-497a-9756-dd7269b0a122.png#averageHue=%23c5b690&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=452&id=ud77b12af&margin=%5Bobject%20Object%5D&name=image.png&originHeight=678&originWidth=770&originalType=binary&ratio=1&rotation=0&showTitle=false&size=168888&status=done&style=none&taskId=u309087b7-fab9-42ed-885f-43aba9c233c&title=&width=513.3333333333334" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673163099589-171954fd-a034-497a-9756-dd7269b0a122.png#averageHue=%23c5b690&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=452&id=ud77b12af&margin=%5Bobject%20Object%5D&name=image.png&originHeight=678&originWidth=770&originalType=binary&ratio=1&rotation=0&showTitle=false&size=168888&status=done&style=none&taskId=u309087b7-fab9-42ed-885f-43aba9c233c&title=&width=513.3333333333334" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673163157171-c5b1b836-2164-4ad6-a04f-d8639903c0d0.png#averageHue=%23fdfdfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=209&id=u4786e11a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=314&originWidth=836&originalType=binary&ratio=1&rotation=0&showTitle=false&size=89535&status=done&style=none&taskId=u7e119c1b-039b-4587-874c-3d5b27166df&title=&width=557.3333333333334" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673163157171-c5b1b836-2164-4ad6-a04f-d8639903c0d0.png#averageHue=%23fdfdfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=209&id=u4786e11a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=314&originWidth=836&originalType=binary&ratio=1&rotation=0&showTitle=false&size=89535&status=done&style=none&taskId=u7e119c1b-039b-4587-874c-3d5b27166df&title=&width=557.3333333333334" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673163198268-7bf8c8c4-b825-4874-9bfb-bf1401e57ab8.png#averageHue=%23cecaa2&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=239&id=u1f4b21b9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=358&originWidth=1015&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75206&status=done&style=none&taskId=uf0ef2a63-bc5a-4d29-9710-c858c5f49af&title=&width=676.6666666666666" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673163198268-7bf8c8c4-b825-4874-9bfb-bf1401e57ab8.png#averageHue=%23cecaa2&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=239&id=u1f4b21b9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=358&originWidth=1015&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75206&status=done&style=none&taskId=uf0ef2a63-bc5a-4d29-9710-c858c5f49af&title=&width=676.6666666666666" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"><br> 该状态码表明服务器上无法找到请求的资源。除此之外，也可以在 服务器端拒绝请求且不想说明理由时使用。 </p><h2 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673163266674-4d1e3d41-7ae7-4f92-b7e7-4a38d55fc5c7.png#averageHue=%23fdfdfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=212&id=ue998a3d2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=318&originWidth=842&originalType=binary&ratio=1&rotation=0&showTitle=false&size=90991&status=done&style=none&taskId=u19becc50-0f3f-42f5-9b84-96480ff4f4a&title=&width=561.3333333333334" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673163266674-4d1e3d41-7ae7-4f92-b7e7-4a38d55fc5c7.png#averageHue=%23fdfdfc&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=212&id=ue998a3d2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=318&originWidth=842&originalType=binary&ratio=1&rotation=0&showTitle=false&size=90991&status=done&style=none&taskId=u19becc50-0f3f-42f5-9b84-96480ff4f4a&title=&width=561.3333333333334" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h2 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673163290043-ab166945-653f-46cf-8172-9b18505484be.png#averageHue=%23fdfdfd&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=223&id=u3cb151c1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=334&originWidth=864&originalType=binary&ratio=1&rotation=0&showTitle=false&size=87955&status=done&style=none&taskId=uc31d897d-dc6c-442b-8ec8-36783e83813&title=&width=576" class="lazyload placeholder" data-srcset="https://cdn.nlark.com/yuque/0/2023/png/34003712/1673163290043-ab166945-653f-46cf-8172-9b18505484be.png#averageHue=%23fdfdfd&clientId=u528a9ada-2469-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=223&id=u3cb151c1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=334&originWidth=864&originalType=binary&ratio=1&rotation=0&showTitle=false&size=87955&status=done&style=none&taskId=uc31d897d-dc6c-442b-8ec8-36783e83813&title=&width=576" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image.png"></p><h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><p>HTTPS 并非是应用层的一种新协议。只是 HTTP 通信接口部分用 SSL（Secure Socket Layer）和 TLS（Transport Layer Security）协议代替而已。</p>]]></content>
      
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过部署alist挂载各大网盘资源</title>
      <link href="/2024/05/16/%E9%80%9A%E8%BF%87%E9%83%A8%E7%BD%B2alist%E6%8C%82%E8%BD%BD%E5%90%84%E5%A4%A7%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90/"/>
      <url>/2024/05/16/%E9%80%9A%E8%BF%87%E9%83%A8%E7%BD%B2alist%E6%8C%82%E8%BD%BD%E5%90%84%E5%A4%A7%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h1 id="通过部署alist挂载各大网盘资源"><a href="#通过部署alist挂载各大网盘资源" class="headerlink" title="通过部署alist挂载各大网盘资源"></a>通过部署alist挂载各大网盘资源</h1><h2 id="安装alist"><a href="#安装alist" class="headerlink" title="安装alist"></a>安装alist</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install curl</span><br><span class="line">curl -fsSL &quot;https://alist.nn.ci/v3.sh&quot; | bash -s install</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">启动: systemctl start alist</span><br><span class="line">关闭: systemctl stop alist</span><br><span class="line">状态: systemctl status alist</span><br><span class="line">重启: systemctl restart alist</span><br></pre></td></tr></table></figure><p>放行5244端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 5244/tcp</span><br></pre></td></tr></table></figure><h2 id="配置管理员密码"><a href="#配置管理员密码" class="headerlink" title="配置管理员密码"></a>配置管理员密码</h2><p>alist默认安装在 &#x2F;opt&#x2F;alist 中。进入其目录后执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./alist admin set NEW_PASSWORD</span><br></pre></td></tr></table></figure><p>NEW_PASSWORD即为admin用户的密码。</p><h2 id="挂载网盘"><a href="#挂载网盘" class="headerlink" title="挂载网盘"></a>挂载网盘</h2><p>我这里以天翼云盘为例</p><p>驱动选择天翼云盘客户端</p><p>挂载路径必填，相当于目录位置</p><p>用户和密码必填，这就是天翼云盘的账号密码</p><p>根文件夹ID可以根据下图我选中的部分来查看</p><p><img src="https://s2.loli.net/2024/05/16/4yUvGHBO7Yhbntf.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2024/05/16/4yUvGHBO7Yhbntf.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="文件夹ID"></p><p>其他选项根据需要填写</p><p>之后保存即可</p><p><a href="http://s.tonywu.top:5244/">这是我的alist网页</a></p><p>可以使用下面这个账号登陆</p><p>用户名：friend</p><p>密码：123123123</p><p>有查看和下载的权限</p><p>欢迎来白嫖哦~</p><h2 id="离线下载功能"><a href="#离线下载功能" class="headerlink" title="离线下载功能"></a>离线下载功能</h2><p>离线下载功能需要安装aria2，安装方法可查看<a href="https://zhuanlan.zhihu.com/p/658156257">这篇文章</a></p><p>安装完成后打开alist右下角的按钮并展开，选择离线下载，并选择aria2即可。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署minecraft服务器并添加mods</title>
      <link href="/2024/04/21/%E9%83%A8%E7%BD%B2minecraft%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E6%B7%BB%E5%8A%A0mods/"/>
      <url>/2024/04/21/%E9%83%A8%E7%BD%B2minecraft%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E6%B7%BB%E5%8A%A0mods/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建minecraft服务器并添加mods"><a href="#搭建minecraft服务器并添加mods" class="headerlink" title="搭建minecraft服务器并添加mods"></a>搭建minecraft服务器并添加mods</h1><h2 id="下载forge"><a href="#下载forge" class="headerlink" title="下载forge"></a>下载<a href="https://files.minecraftforge.net/net/minecraftforge/forge/index_1.20.1.html">forge</a></h2><p>找到你要的forge版本<br><img src="https://s2.loli.net/2024/04/21/vO21fKTjPQUXR4A.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2024/04/21/vO21fKTjPQUXR4A.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>选择intall server<br><img src="https://s2.loli.net/2024/04/21/MACfe2IRPgFDG3E.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2024/04/21/MACfe2IRPgFDG3E.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h2 id="部署forge服务器"><a href="#部署forge服务器" class="headerlink" title="部署forge服务器"></a>部署forge服务器</h2><p>根据你的操作系统打开run.sh（linux）或run.bat（windows），在此之前要先安装java，并确认你的java版本与forge版本兼容。<br><img src="https://s2.loli.net/2024/04/21/91DhbGNkB2av8qE.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2024/04/21/91DhbGNkB2av8qE.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>此时会生成一个elua.txt，打开并将elua的值改为true，再次启动run.sh（run.bat）<br><img src="https://s2.loli.net/2024/04/21/fGFoIdql5OAxL7U.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2024/04/21/fGFoIdql5OAxL7U.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>mod可以放入mods文件夹内，成功启动后界面如下<br><img src="https://s2.loli.net/2024/04/21/Dld5x6PoiEVXgJt.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2024/04/21/Dld5x6PoiEVXgJt.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"><br>打开服务器的25565端口即可远程连接mc服务器</p><h2 id="其他MC服务器核心"><a href="#其他MC服务器核心" class="headerlink" title="其他MC服务器核心"></a>其他MC服务器核心</h2><p>除了forge其他还有很多服务器核心，如paper，mohist，arclight等，可以根据是否要添加插件或模组进行选择。其他服务器的部署与使用与forge大同小异，具体可以参考该服务器核心的文档。</p><p><a href="https://www.fastmirror.net/?coreVersion=1.20.1#/download/Paper?coreVersion=1.21.1">这里是服务器核心镜像网站</a>。</p>]]></content>
      
      
      <categories>
          
          <category> minecraft </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在阿里的灵积模型中嵌入垂直领域知识库</title>
      <link href="/2024/04/21/%E5%9C%A8%E9%98%BF%E9%87%8C%E7%9A%84%E7%81%B5%E7%A7%AF%E6%A8%A1%E5%9E%8B%E4%B8%AD%E5%B5%8C%E5%85%A5%E5%9E%82%E7%9B%B4%E9%A2%86%E5%9F%9F%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
      <url>/2024/04/21/%E5%9C%A8%E9%98%BF%E9%87%8C%E7%9A%84%E7%81%B5%E7%A7%AF%E6%A8%A1%E5%9E%8B%E4%B8%AD%E5%B5%8C%E5%85%A5%E5%9E%82%E7%9B%B4%E9%A2%86%E5%9F%9F%E7%9F%A5%E8%AF%86%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="在阿里的灵积模型中嵌入垂直领域知识库"><a href="#在阿里的灵积模型中嵌入垂直领域知识库" class="headerlink" title="在阿里的灵积模型中嵌入垂直领域知识库"></a>在阿里的灵积模型中嵌入垂直领域知识库</h1><h2 id="灵积模型api调用"><a href="#灵积模型api调用" class="headerlink" title="灵积模型api调用"></a><a href="https://help.aliyun.com/document_detail/611472.html">灵积模型</a>api调用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install dashscope</span><br></pre></td></tr></table></figure><p>你的api key建议直接加入环境变量中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from http import HTTPStatus</span><br><span class="line">import dashscope</span><br><span class="line"></span><br><span class="line">def sample_sync_call():</span><br><span class="line">    prompt_text = &#x27;用萝卜、土豆、茄子做饭，给我个菜谱。&#x27;</span><br><span class="line">    resp = dashscope.Generation.call(</span><br><span class="line">        model=&#x27;qwen-turbo&#x27;,</span><br><span class="line">        prompt=prompt_text</span><br><span class="line">    )</span><br><span class="line">    # The response status_code is HTTPStatus.OK indicate success,</span><br><span class="line">    # otherwise indicate request is failed, you can get error code</span><br><span class="line">    # and message from code and message.</span><br><span class="line">    if resp.status_code == HTTPStatus.OK:</span><br><span class="line">        print(resp.output)  # The output text</span><br><span class="line">        print(resp.usage)  # The usage information</span><br><span class="line">    else:</span><br><span class="line">        print(resp.code)  # The error code.</span><br><span class="line">        print(resp.message)  # The error message.</span><br><span class="line"></span><br><span class="line">sample_sync_call()</span><br></pre></td></tr></table></figure><h2 id="embedding"><a href="#embedding" class="headerlink" title="embedding"></a>embedding</h2><ol><li><p>本地知识库的向量化。通过文本向量模型将其转化为高质量低维度的向量数据，再写入DashVector向量检索服务。这里数据的向量化我们采用了灵积模型服务上的Embedding API实现。</p></li><li><p>相关知识点的提取。将提问文本向量化后，通过DashVector提取相关知识点的原文。</p></li><li><p>构造Prompt进行提问。将相关知识点作为“限定上下文+提问” 一起作为prompt询问通义千问。</p></li></ol><p><img src="https://s2.loli.net/2024/04/21/84SCJQOK5rjEsGt.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2024/04/21/84SCJQOK5rjEsGt.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="20240421035739"></p><h2 id="本地知识库的向量化"><a href="#本地知识库的向量化" class="headerlink" title="本地知识库的向量化"></a>本地知识库的向量化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install dashvector</span><br></pre></td></tr></table></figure><p>dashscope.api_key,dashvector的api_key和endpoint需要写上你自己的，加载预料处的路径也改为你数据集的目录路径。batch_size根据自己需求调整。我这里用的数据集是从“人人都是产品经理”上爬下来的文章。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">import dashscope</span><br><span class="line">from dashscope import TextEmbedding</span><br><span class="line">import dashvector</span><br><span class="line">from dashvector import Client, Doc</span><br><span class="line"></span><br><span class="line">def prepare_data(path, batch_size=25):</span><br><span class="line">    batch_docs = []</span><br><span class="line">    for file in os.listdir(path):</span><br><span class="line">        with open(path + &#x27;/&#x27; + file, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">            batch_docs.append(f.read())</span><br><span class="line">            if len(batch_docs) == batch_size:</span><br><span class="line">                yield batch_docs</span><br><span class="line">                batch_docs = []</span><br><span class="line"></span><br><span class="line">    if batch_docs:</span><br><span class="line">        yield batch_docs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def generate_embeddings(news):</span><br><span class="line">    rsp = TextEmbedding.call(</span><br><span class="line">        model=TextEmbedding.Models.text_embedding_v1,</span><br><span class="line">        input=news</span><br><span class="line">    )</span><br><span class="line">    embeddings = [record[&#x27;embedding&#x27;] for record in rsp.output[&#x27;embeddings&#x27;]]</span><br><span class="line">    return embeddings if isinstance(news, list) else embeddings[0]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    dashscope.api_key = &#x27;&#x27;</span><br><span class="line">    </span><br><span class="line">    # 初始化 client</span><br><span class="line">    client = dashvector.Client(</span><br><span class="line">        api_key=&#x27;&#x27;,</span><br><span class="line">        endpoint=&#x27;&#x27;</span><br><span class="line">    )</span><br><span class="line">    assert client</span><br><span class="line"></span><br><span class="line">    # 创建集合：指定集合名称和向量维度, text_embedding_v1 模型产生的向量统一为 1536 维</span><br><span class="line">    rsp = client.create(&#x27;product&#x27;, 1536)</span><br><span class="line">    assert rsp</span><br><span class="line"></span><br><span class="line">    # 加载语料</span><br><span class="line">    id = 0</span><br><span class="line">    collection = client.get(&#x27;product&#x27;)</span><br><span class="line">    for news in list(prepare_data(&#x27;knowledgedata/PM-data-master/woshipm.com&#x27;)):</span><br><span class="line">        print(news)</span><br><span class="line">        ids = [id + i for i, _ in enumerate(news)]</span><br><span class="line"></span><br><span class="line">        id += len(news)</span><br><span class="line"></span><br><span class="line">        vectors = generate_embeddings(news)</span><br><span class="line">        # 写入 dashvector 构建索引</span><br><span class="line">        rsp = collection.upsert(</span><br><span class="line">            [</span><br><span class="line">                Doc(id=str(id), vector=vector, fields=&#123;&quot;raw&quot;: doc&#125;)</span><br><span class="line">                for id, vector, doc in zip(ids, vectors, news)</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line">        assert rsp</span><br></pre></td></tr></table></figure><h2 id="知识点的提取"><a href="#知识点的提取" class="headerlink" title="知识点的提取"></a>知识点的提取</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import dashvector</span><br><span class="line">from dashvector import Client</span><br><span class="line">from dashvector import Doc</span><br><span class="line">from embedding import generate_embeddings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def search_relevant_news(question):</span><br><span class="line">    # 初始化 dashvector client</span><br><span class="line">    client = dashvector.Client(</span><br><span class="line">        api_key=&#x27;&#x27;,</span><br><span class="line">        endpoint=&#x27;&#x27;</span><br><span class="line">    )</span><br><span class="line">    assert client</span><br><span class="line"></span><br><span class="line">    # 获取刚刚存入的集合</span><br><span class="line">    collection = client.get(&#x27;product&#x27;)</span><br><span class="line">    assert collection</span><br><span class="line"></span><br><span class="line">    # 向量检索：指定 topk = 1 </span><br><span class="line">    rsp = collection.query(generate_embeddings(question), output_fields=[&#x27;raw&#x27;],topk=1)</span><br><span class="line">    assert rsp</span><br><span class="line">    return rsp.output[0].fields[&#x27;raw&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">question = input(&quot;请输入问题：&quot;)</span><br><span class="line">print(search_relevant_news(question))</span><br></pre></td></tr></table></figure><h2 id="构造Prompt进行提问"><a href="#构造Prompt进行提问" class="headerlink" title="构造Prompt进行提问"></a>构造Prompt进行提问</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">import dashscope</span><br><span class="line">from http import HTTPStatus</span><br><span class="line">import os</span><br><span class="line">import webbrowser</span><br><span class="line"></span><br><span class="line">import dashvector</span><br><span class="line">from dashvector import Client</span><br><span class="line">from dashvector import Doc</span><br><span class="line">from embedding import generate_embeddings</span><br><span class="line"></span><br><span class="line">def generate_response(prompt):</span><br><span class="line">    response_generator = dashscope.Generation.call(</span><br><span class="line">        model=&#x27;chatglm3-6b&#x27;,</span><br><span class="line">        prompt=prompt,</span><br><span class="line">        stream=True,</span><br><span class="line">        top_p=0.8)</span><br><span class="line"></span><br><span class="line">    head_idx = 0</span><br><span class="line">    print(&quot;\n&quot;)</span><br><span class="line">    for resp in response_generator:</span><br><span class="line">        paragraph = resp.output[&#x27;text&#x27;]</span><br><span class="line">        # print(&quot;\r%s&quot; % paragraph[head_idx:len(paragraph)], end=&#x27;&#x27;)</span><br><span class="line">        if(paragraph.rfind(&#x27;\n&#x27;) != -1):</span><br><span class="line">            head_idx = paragraph.rfind(&#x27;\n&#x27;) + 1</span><br><span class="line"></span><br><span class="line">    if resp.status_code == HTTPStatus.OK:</span><br><span class="line">        return resp.output.text  # The output text</span><br><span class="line">        print(resp.usage)  # The usage information</span><br><span class="line">    else:</span><br><span class="line">        print(resp.code)  # The error code.</span><br><span class="line">        print(resp.message)  # The error message.</span><br><span class="line"></span><br><span class="line">def search_relevant_news(question):</span><br><span class="line">    # 初始化 dashvector client</span><br><span class="line">    client = dashvector.Client(</span><br><span class="line">        api_key=&#x27;&#x27;,</span><br><span class="line">        endpoint=&#x27;&#x27;</span><br><span class="line">    )</span><br><span class="line">    assert client</span><br><span class="line"></span><br><span class="line">    # 获取刚刚存入的集合</span><br><span class="line">    collection = client.get(&#x27;product&#x27;)</span><br><span class="line">    assert collection</span><br><span class="line"></span><br><span class="line">    # 向量检索：指定 topk = 1 </span><br><span class="line">    rsp = collection.query(generate_embeddings(question), output_fields=[&#x27;raw&#x27;],topk=1)</span><br><span class="line">    assert rsp</span><br><span class="line">    return rsp.output[0].fields[&#x27;raw&#x27;]</span><br><span class="line"></span><br><span class="line"># 初始化对话历史列表</span><br><span class="line">dialogue_history = []</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    # 获取用户输入的对话内容</span><br><span class="line">    origin_user_input = input(&quot;\n\n请描述您的问题：&quot;)</span><br><span class="line"></span><br><span class="line">    # 结束循环条件：用户未输入新对话</span><br><span class="line">    if not origin_user_input:</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">    # 添加知识库参考</span><br><span class="line">    user_input = search_relevant_news(origin_user_input) + &quot;\n请参考以上资料回答下列问题\n&quot; + origin_user_input</span><br><span class="line">    # print(user_input)</span><br><span class="line"></span><br><span class="line">    # 将用户对话内容添加到历史记录中</span><br><span class="line">    dialogue_history.append(user_input)</span><br><span class="line"></span><br><span class="line">    # 构建包含对话历史的新提示</span><br><span class="line">    prompt_text = &quot;\n&quot;.join(dialogue_history)</span><br><span class="line"></span><br><span class="line">    # 使用新的对话上下文生成回复</span><br><span class="line">    generated_response = generate_response(prompt_text)</span><br><span class="line"></span><br><span class="line">    print(generated_response)</span><br><span class="line"></span><br><span class="line">    # 获取当前工作目录</span><br><span class="line">    current_dir = os.getcwd()</span><br><span class="line"></span><br><span class="line">    with open(&#x27;answer.txt&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">        f.write(generated_response)</span><br><span class="line"></span><br><span class="line"># 循环结束后，程序会在这里结束</span><br></pre></td></tr></table></figure><p>如此一来，大模型就会根据你知识库的内容来回答你的问题</p><p>提问：需求分析怎么做</p><p>这是通过dashvector从知识库中检索到的内容<br><img src="https://s2.loli.net/2024/04/21/zNAl3HKwaSsjqo5.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2024/04/21/zNAl3HKwaSsjqo5.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="20240421042410"></p><p>这是构造prompt后的对话<br><img src="https://s2.loli.net/2024/04/21/sUrvgFJTQw5PoWG.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2024/04/21/sUrvgFJTQw5PoWG.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="20240421042239"></p><p>很明显大模型参考了知识库，然后根据问题回答</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建国内可访问的ai网页端</title>
      <link href="/2024/04/03/%E6%90%AD%E5%BB%BA%E5%9B%BD%E5%86%85%E5%8F%AF%E8%AE%BF%E9%97%AE%E7%9A%84ai%E7%BD%91%E9%A1%B5%E7%AB%AF/"/>
      <url>/2024/04/03/%E6%90%AD%E5%BB%BA%E5%9B%BD%E5%86%85%E5%8F%AF%E8%AE%BF%E9%97%AE%E7%9A%84ai%E7%BD%91%E9%A1%B5%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建国内可访问的ai网页端"><a href="#搭建国内可访问的ai网页端" class="headerlink" title="搭建国内可访问的ai网页端"></a>搭建国内可访问的ai网页端</h1><p>各个大厂的AI大家想必应该都已经体验过了。但当我们的亲朋好友想使用ai时，就比较麻烦了。所以这里提供一个快速自建ai网页端的方案，能让朋友不用科学上网也能体验到国外的大模型。</p><h2 id="Vercel部署网页"><a href="#Vercel部署网页" class="headerlink" title="Vercel部署网页"></a>Vercel部署网页</h2><p>如果你有openai的api额度，可以创建一个api key。没有openai的话，google的gemini或其他模型的api key也可以。</p><p>部署非常简单，创建仓库后填一下OPENAI_API_KEY和CODE（安全密码，可选）即可。</p><p><a href="https://vercel.com/new/clone?repository-url=https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web&env=OPENAI_API_KEY&env=CODE&project-name=nextchat&repository-name=NextChat">点我跳转部署</a></p><p><img src="https://s2.loli.net/2024/04/03/SQ2ueCkZ97WGTib.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2024/04/03/SQ2ueCkZ97WGTib.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>点击deploy，等待几分钟后，网页便部署好了</p><h2 id="添加GOOGLE-API-KEY"><a href="#添加GOOGLE-API-KEY" class="headerlink" title="添加GOOGLE API KEY"></a>添加GOOGLE API KEY</h2><p>在setting中的environment variables中添加key（密钥名称GOOGLE_API_KEY）和value（你的密钥），点击save。</p><p><img src="https://s2.loli.net/2024/04/03/Leyl84fGHIKBUYT.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2024/04/03/Leyl84fGHIKBUYT.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><h2 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h2><p>在settings-&gt;domain中添加你的域名，然后在你购买域名的平台cname解析到vercel给你显示的地址。<br>在deployment中点击redeploy重新部署网页</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>在登陆输入刚刚设置的code</p><p><img src="https://s2.loli.net/2024/04/03/UhR3l4pF5LADJWY.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2024/04/03/UhR3l4pF5LADJWY.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>登陆后可以在设置中将模型改为google的gemini</p><p><img src="https://s2.loli.net/2024/04/03/T6ocMVp57g9yUbz.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2024/04/03/T6ocMVp57g9yUbz.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>之后就可用开始愉快使用啦！</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vercel aicate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用beekeeper远程连接mysql数据库</title>
      <link href="/2024/04/01/%E4%BD%BF%E7%94%A8beekeeper%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2024/04/01/%E4%BD%BF%E7%94%A8beekeeper%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="使用beekeeper远程连接mysql数据库"><a href="#使用beekeeper远程连接mysql数据库" class="headerlink" title="使用beekeeper远程连接mysql数据库"></a>使用beekeeper远程连接mysql数据库</h1><p>首先更新一下软件包列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>出现了几个无法下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">命中:1 http://security.ubuntu.com/ubuntu xenial-security InRelease</span><br><span class="line">获取:2 http://mirrors.tuna.tsinghua.edu.cn/ubuntu xenial InRelease [10.3 kB]</span><br><span class="line">错误:2 http://mirrors.tuna.tsinghua.edu.cn/ubuntu xenial InRelease</span><br><span class="line">  明文签署文件不可用，结果为‘NOSPLIT’（您的网络需要认证吗？）</span><br><span class="line">获取:3 http://mirrors.tuna.tsinghua.edu.cn/ubuntu xenial-updates InRelease [10.3 kB]</span><br><span class="line">错误:3 http://mirrors.tuna.tsinghua.edu.cn/ubuntu xenial-updates InRelease</span><br><span class="line">  明文签署文件不可用，结果为‘NOSPLIT’（您的网络需要认证吗？）</span><br><span class="line">获取:4 http://mirrors.tuna.tsinghua.edu.cn/ubuntu xenial-backports InRelease [10.3 kB]</span><br><span class="line">错误:4 http://mirrors.tuna.tsinghua.edu.cn/ubuntu xenial-backports InRelease</span><br><span class="line">  明文签署文件不可用，结果为‘NOSPLIT’（您的网络需要认证吗？）</span><br><span class="line">已下载 31.0 kB，耗时 1秒 (26.2 kB/s)</span><br><span class="line">正在读取软件包列表... 完成</span><br><span class="line">E: 无法下载 http://cn.archive.ubuntu.com/ubuntu/dists/xenial/InRelease  明文签署文件不可用，结果为‘NOSPLIT’（您的网络需要认证吗？）</span><br><span class="line">E: 无法下载 http://cn.archive.ubuntu.com/ubuntu/dists/xenial-updates/InRelease  明文签署文件不可用，结果为‘NOSPLIT’（您的网络需要认证吗？）</span><br><span class="line">E: 无法下载 http://cn.archive.ubuntu.com/ubuntu/dists/xenial-backports/InRelease  明文签署文件不可用，结果为‘NOSPLIT’（您的网络需要认证吗？）</span><br><span class="line">E: 部分索引文件下载失败。如果忽略它们，那将转而使用旧的索引文件。</span><br></pre></td></tr></table></figure><p>因为是刚装的虚拟机，所以还没有配置过apt源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">cd /etc/apt</span><br><span class="line">vim sources.list</span><br></pre></td></tr></table></figure><p>把源替换成阿里源、清华源或中科大源。这里我选择了阿里源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#  阿里源</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>安装mysql-server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure><p>启动mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/mysql start</span><br><span class="line">[ ok ] Starting mysql (via systemctl): mysql.service.</span><br></pre></td></tr></table></figure><p>查看mysql版本验证是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br><span class="line">mysql  Ver 14.14 Distrib 5.7.42, for Linux (x86_64) using  EditLine wrapper</span><br></pre></td></tr></table></figure><p>进入mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql</span><br></pre></td></tr></table></figure><p>创建一个新的用户并配置密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;tony&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;yourpasswd&#x27;;</span><br></pre></td></tr></table></figure><p>查看用户表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT User, Host, authentication_string FROM mysql.user;</span><br><span class="line">+------------------+-----------+-------------------------------------------+</span><br><span class="line">| User             | Host      | authentication_string                     |</span><br><span class="line">+------------------+-----------+-------------------------------------------+</span><br><span class="line">| root             | localhost |                                           |</span><br><span class="line">| mysql.session    | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</span><br><span class="line">| mysql.sys        | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</span><br><span class="line">| debian-sys-maint | localhost | *F88FAB99DA931815794B206EF76153157BB46708 |</span><br><span class="line">| tony             | %         | *71C4791904DFA9FBABAE8F06D9CD9EF4F84544E4 |</span><br><span class="line">+------------------+-----------+-------------------------------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>给予新用户权限(具体权限可以根据自己的需求更改)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;tony&#x27;@&#x27;%&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>配置防火墙，允许3306端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 3306/tcp</span><br></pre></td></tr></table></figure><p>修改<code>/etc/mysql/my.cnf</code>或<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">bind-address = 0.0.0.0</span><br></pre></td></tr></table></figure><p>重启mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure><p>下载社区版的<a href="https://github.com/beekeeper-studio/beekeeper-studio/releases">beekeeper</a></p><p>安装完成后打开，点击new connection</p><p><img src="https://s2.loli.net/2024/04/01/jTJO8cdCuRv3PB2.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2024/04/01/jTJO8cdCuRv3PB2.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>connection type选择mysql</p><p>接下来依次填写你服务器的ip（域名），要连接的端口（mysql默认3306），用户名及用户密码（刚刚创建的）</p><p><img src="https://s2.loli.net/2024/04/01/8lvArm9iFsS4H3q.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2024/04/01/8lvArm9iFsS4H3q.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p>点击connect连接成功</p><p><img src="https://s2.loli.net/2024/04/01/K6EXShsaJ7WilUp.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2024/04/01/K6EXShsaJ7WilUp.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> beekeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用python脚本自动操作微信小程序</title>
      <link href="/2024/03/18/%E4%BD%BF%E7%94%A8python%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E6%93%8D%E4%BD%9C%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2024/03/18/%E4%BD%BF%E7%94%A8python%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E6%93%8D%E4%BD%9C%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="使用python脚本自动操作小程序"><a href="#使用python脚本自动操作小程序" class="headerlink" title="使用python脚本自动操作小程序"></a>使用python脚本自动操作小程序</h1><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>今天群里有人分享了一个微信小游戏———“开局托儿所”，制作方是和“羊了个羊”同一个公司，可想而知这个游戏的尿性。第一关极其简单，第二关难度飙升，玩到后面无解也是常态。我玩了一局，果不其然，只有托儿所的水平。这怎么能忍呢？python，启动！</p><h2 id="游戏规则"><a href="#游戏规则" class="headerlink" title="游戏规则"></a>游戏规则</h2><p>在开始写代码之前，我先介绍一下这个游戏的规则。</p><p>游戏会先给出一个随机的数字方阵，玩家可以在屏幕上绘制矩形，被矩形覆盖到的数字相加若等于10则会被消除，消除的数字越多，分数越多。当然，你也可以自己搜索小程序玩上一局。<br><img src="https://s2.loli.net/2024/03/18/fKegp7mCJMFWYEU.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2024/03/18/fKegp7mCJMFWYEU.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="开局托儿所游戏图片"></p><h2 id="需要用到的库"><a href="#需要用到的库" class="headerlink" title="需要用到的库"></a>需要用到的库</h2><ol><li><p><code>pyautogui</code>：用于在屏幕上自动执行鼠标和键盘操作。它可以帮助你编写自动化脚本，模拟用户在计算机上的交互行为，例如点击、拖动、输入文本等。</p></li><li><p><code>pygetwindow</code>：用于获取和管理窗口相关信息，例如窗口标题、位置、大小等。它提供了一些方便的方法来操作桌面上的窗口，使得对窗口的管理更加简单和灵活。</p></li><li><p><code>time</code>：Python 标准库中的一个模块，用于处理与时间相关的操作。</p></li><li><p><code>copy</code>：Python 标准库中的一个模块，用于实现对象的浅拷贝（shallow copy）和深拷贝（deep copy）。</p></li><li><p><code>numpy</code>： Python 中用于科学计算的重要库之一。它提供了高性能的多维数组对象（称为 ndarray），以及对这些数组进行操作的各种函数。</p></li><li><p><code>os</code>： Python 标准库中的一个模块，用于与操作系统进行交互，提供了许多对文件和目录进行操作的功能。</p></li><li><p><code>cv2</code>：OpenCV（Open Source Computer Vision Library，开源计算机视觉库）的 Python 接口库，用于图像处理、计算机视觉和图像识别等任务。</p></li><li><p><code>pytesseract</code>：用于将图像中的文本转换为可识别的文本字符串。它是对 Google 的 Tesseract OCR（Optical Character Recognition，光学字符识别）引擎的封装，通过调用 Tesseract 引擎实现文本识别功能。</p></li></ol><p>本脚本中pygetwindow别名gw，numpy别名np</p><h2 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h2><p>首先创建一个eliminater类以及其构造函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def __init__(self, window_title=&quot;开局托儿所&quot;):</span><br><span class="line">    self.window = gw.getWindowsWithTitle(window_title)[0]</span><br><span class="line">    self.width = self.window.width</span><br><span class="line">    self.height = self.window.height</span><br><span class="line">    self.s1list = []</span><br><span class="line">    self.runtime = 0</span><br><span class="line">    self.thread = 3</span><br><span class="line">    self.thd = 80</span><br></pre></td></tr></table></figure><p>action方法用于模拟鼠标绘制矩形</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def action(self, begin_x, end_x, begin_y, end_y,duration=0.1):</span><br><span class="line">    x1, y1, x2, y2 = self.digit_squares[begin_x * 10 + begin_y]</span><br><span class="line">    x1, y1 = ((x1 + x2) / 2, (y1 + y2) / 2)</span><br><span class="line">    x3, y3, x4, y4 = self.digit_squares[(end_x - 1) * 10 + end_y - 1]</span><br><span class="line">    x2, y2 = ((x3 + x4) / 2, (y3 + y4) / 2)</span><br><span class="line">    pyautogui.moveTo(self.window.left + x1, self.window.top+self.height//7 + y1)</span><br><span class="line">    pyautogui.mouseDown()</span><br><span class="line">    pyautogui.moveTo(self.window.left + x2, self.window.top+self.height//7 + y2, duration=duration)</span><br><span class="line">    pyautogui.mouseUp()</span><br></pre></td></tr></table></figure><p>restart方法用于重开一局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def restart(self):</span><br><span class="line">    # 设置</span><br><span class="line">    x = self.window.left + 40</span><br><span class="line">    y = self.window.top + 70</span><br><span class="line">    pyautogui.click(x, y)</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    # 放弃</span><br><span class="line">    x = self.window.left+ (self.width // 2)</span><br><span class="line">    y = self.window.top + 500</span><br><span class="line">    pyautogui.click(x, y)</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    # 确定</span><br><span class="line">    y = self.window.top + 520</span><br><span class="line">    pyautogui.click(x, y)</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    # 开始游戏</span><br><span class="line">    y = self.window.top + 780</span><br><span class="line">    pyautogui.click(x, y)</span><br><span class="line">    time.sleep(2)</span><br></pre></td></tr></table></figure><p>获取score</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def score(self):</span><br><span class="line">    if hasattr(self, &#x27;cal_matrix&#x27;):</span><br><span class="line">        return 160 - np.sum(self.cal_matrix.astype(bool))</span><br><span class="line">    else:</span><br><span class="line">        print(&#x27;未初始化&#x27;)</span><br><span class="line">        return 0</span><br></pre></td></tr></table></figure><p>record方法记录历史分数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def record(self, x):</span><br><span class="line">    with open(&#x27;历史分数.txt&#x27;, &#x27;a&#x27;) as file:</span><br><span class="line">        if x[1]==0:</span><br><span class="line">            file.write(f&#x27;\n&#x27;)</span><br><span class="line">        else:</span><br><span class="line">            file.write(f&#x27;\t策略&#123;x[0]&#125;&#123;x[1]&#125;: &#123;self.score&#125;,&#x27;)</span><br></pre></td></tr></table></figure><p>截图并识别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def init_game(self):</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    print(&#x27;\t截图中……&#x27;)</span><br><span class="line">    self.capture_window()</span><br><span class="line">    if self.frame is not None:</span><br><span class="line">        print(&#x27;\t识别图像中，请耐心等待……&#x27;)</span><br><span class="line">        matrix, self.digit_squares = recognize_matrix(self.frame, self.thread)</span><br><span class="line">        try:</span><br><span class="line">            self.matrix = np.array(matrix).astype(int) </span><br><span class="line">            assert self.matrix.shape == (16,10)</span><br><span class="line">            return True</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(&#x27;\t识别错误，尝试重启&#x27;)</span><br><span class="line">            self.trys += 1</span><br><span class="line">            return False</span><br><span class="line">        time.sleep(3)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;截图失败！&quot;)</span><br><span class="line">        return False</span><br></pre></td></tr></table></figure><p>执行策略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def run_strategy(self, strategy, action=False):</span><br><span class="line">    self.cal_matrix = self.matrix.copy()</span><br><span class="line">    if strategy[0] == 1:</span><br><span class="line">        self.cal_two_x(action=action)</span><br><span class="line">    elif strategy[0] == 2:</span><br><span class="line">        self.cal_two_y(action=action)</span><br><span class="line">    if strategy[1] == 1:</span><br><span class="line">        self.cal_all_x(action=action)</span><br><span class="line">    elif strategy[1] == 2:</span><br><span class="line">        self.cal_all_y(action=action)</span><br></pre></td></tr></table></figure><p>捕捉窗口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def capture_window(self, record=False):</span><br><span class="line">    try:</span><br><span class="line">        try:</span><br><span class="line">            self.window.activate()</span><br><span class="line">        except:</span><br><span class="line">            pass</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        screenshot = pyautogui.screenshot(region=(self.window.left, self.window.top,</span><br><span class="line">                                                    self.window.width, self.window.height))</span><br><span class="line">        frame = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)</span><br><span class="line">        if record:</span><br><span class="line">            cv2.imwrite(f&#x27;result_&#123;int(time.time())&#125;.png&#x27;, frame)</span><br><span class="line">        else:</span><br><span class="line">            self.frame = frame[self.height//7:-self.height//25,:,:]</span><br><span class="line">            cv2.imwrite(&#x27;shot.png&#x27;, self.frame)</span><br><span class="line">    except IndexError:</span><br><span class="line">        print(&quot;窗口未找到&quot;)</span><br><span class="line">        return None</span><br></pre></td></tr></table></figure><p>各种策略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line">def cal_all_x(self, End=False, action=False):</span><br><span class="line">    if End:</span><br><span class="line">        return</span><br><span class="line">    else:</span><br><span class="line">        End=True</span><br><span class="line">        for x_len in range(1, 16):</span><br><span class="line">            for y_len in range(1, 10):</span><br><span class="line">                for begin_x in range(0, 16-x_len+1):</span><br><span class="line">                    for begin_y in range(0, 10-y_len+1):</span><br><span class="line">                        _sum = np.sum(self.cal_matrix[begin_x:begin_x+x_len,begin_y: begin_y + y_len])</span><br><span class="line">                        if _sum == 10:</span><br><span class="line">                            self.cal_matrix[begin_x:begin_x+x_len,begin_y: begin_y + y_len] = 0</span><br><span class="line">                            if action:</span><br><span class="line">                                self.action(begin_x, begin_x+x_len, begin_y, begin_y + y_len)</span><br><span class="line">                            End = False</span><br><span class="line">        self.cal_all_x(End=End, action=action)</span><br><span class="line">        </span><br><span class="line">def cal_all_y(self, End=False, action=False):</span><br><span class="line">    if End:</span><br><span class="line">        return</span><br><span class="line">    else:</span><br><span class="line">        End=True</span><br><span class="line">        for y_len in range(1, 10):</span><br><span class="line">            for x_len in range(1, 16):</span><br><span class="line">                for begin_x in range(0, 16-x_len+1):</span><br><span class="line">                    for begin_y in range(0, 10-y_len+1):</span><br><span class="line">                        _sum = np.sum(self.cal_matrix[begin_x:begin_x+x_len,begin_y: begin_y + y_len])</span><br><span class="line">                        if _sum == 10:</span><br><span class="line">                            self.cal_matrix[begin_x:begin_x+x_len,begin_y: begin_y + y_len] = 0</span><br><span class="line">                            if action:</span><br><span class="line">                                self.action(begin_x, begin_x+x_len, begin_y, begin_y + y_len)</span><br><span class="line">                            End = False</span><br><span class="line">        self.cal_all_y(End=End, action=action)</span><br><span class="line"></span><br><span class="line">def cal_two_x(self, End=False, action=False):</span><br><span class="line">    if End:</span><br><span class="line">        return</span><br><span class="line">    else:</span><br><span class="line">        End=True</span><br><span class="line">        for begin_x in range(0, 16):</span><br><span class="line">            for begin_y in range(0, 10):</span><br><span class="line">                # 搜索右边</span><br><span class="line">                if self.cal_matrix[begin_x, begin_y] ==0:</span><br><span class="line">                    continue</span><br><span class="line">                if len(self.s1list) &gt;0 and self.cal_matrix[begin_x, begin_y] not in self.s1list:</span><br><span class="line">                    continue</span><br><span class="line">                for x in range(begin_x+1, 16):</span><br><span class="line">                    if self.cal_matrix[x, begin_y] ==0:</span><br><span class="line">                        continue</span><br><span class="line">                    elif self.cal_matrix[begin_x, begin_y]+self.cal_matrix[x, begin_y] ==10:</span><br><span class="line">                        self.cal_matrix[x, begin_y] = 0</span><br><span class="line">                        self.cal_matrix[begin_x, begin_y] = 0</span><br><span class="line">                        if action:</span><br><span class="line">                            self.action(begin_x, x+1, begin_y, begin_y+1)</span><br><span class="line">                        End = False</span><br><span class="line">                        break</span><br><span class="line">                    else:</span><br><span class="line">                        break</span><br><span class="line">                # 搜索左边</span><br><span class="line">                for x in range(begin_x-1, -1, -1):</span><br><span class="line">                    if x &lt; 0:</span><br><span class="line">                        break</span><br><span class="line">                    if self.cal_matrix[x, begin_y] ==0:</span><br><span class="line">                        continue</span><br><span class="line">                    elif self.cal_matrix[begin_x, begin_y]+self.cal_matrix[x, begin_y] ==10:</span><br><span class="line">                        self.cal_matrix[x, begin_y] = 0</span><br><span class="line">                        self.cal_matrix[begin_x, begin_y] = 0</span><br><span class="line">                        if action:</span><br><span class="line">                            self.action(x, begin_x+1, begin_y, begin_y+1)</span><br><span class="line">                        End = False</span><br><span class="line">                        break</span><br><span class="line">                    else:</span><br><span class="line">                        break</span><br><span class="line">                # 搜索下面</span><br><span class="line">                for y in range(begin_y+1, 10):</span><br><span class="line">                    if self.cal_matrix[begin_x, y] ==0:</span><br><span class="line">                        continue</span><br><span class="line">                    elif self.cal_matrix[begin_x, begin_y]+self.cal_matrix[begin_x, y] ==10:</span><br><span class="line">                        self.cal_matrix[begin_x, begin_y] = 0</span><br><span class="line">                        self.cal_matrix[begin_x, y] = 0</span><br><span class="line">                        if action:</span><br><span class="line">                            self.action(begin_x, begin_x+1, begin_y, y+1)</span><br><span class="line">                        End = False</span><br><span class="line">                        break</span><br><span class="line">                    else:</span><br><span class="line">                        break</span><br><span class="line">                # 搜索上面</span><br><span class="line">                for y in range(begin_y-1, -1, -1):</span><br><span class="line">                    if y &lt; 0:</span><br><span class="line">                        break</span><br><span class="line">                    if self.cal_matrix[begin_x, y] ==0:</span><br><span class="line">                        continue</span><br><span class="line">                    elif self.cal_matrix[begin_x, begin_y]+self.cal_matrix[begin_x, y] ==10:</span><br><span class="line">                        self.cal_matrix[begin_x, begin_y] = 0</span><br><span class="line">                        self.cal_matrix[begin_x, y] = 0</span><br><span class="line">                        if action:</span><br><span class="line">                            self.action(begin_x, begin_x+1, y, begin_y+1)</span><br><span class="line">                        End = False</span><br><span class="line">                        break</span><br><span class="line">                    else:</span><br><span class="line">                        break</span><br><span class="line">        self.cal_two_x(End=End, action=action)</span><br><span class="line">        </span><br><span class="line">def cal_two_y(self, End=False, action=False):</span><br><span class="line">    if End:</span><br><span class="line">        return</span><br><span class="line">    else:</span><br><span class="line">        End=True</span><br><span class="line">        for begin_y in range(0, 10):</span><br><span class="line">            for begin_x in range(0, 16):</span><br><span class="line">                # 搜索右边</span><br><span class="line">                if self.cal_matrix[begin_x, begin_y] ==0:</span><br><span class="line">                    continue</span><br><span class="line">                if len(self.s1list) &gt;0 and self.cal_matrix[begin_x, begin_y] not in self.s1list:</span><br><span class="line">                    continue</span><br><span class="line">                for x in range(begin_x+1, 16):</span><br><span class="line">                    if self.cal_matrix[x, begin_y] ==0:</span><br><span class="line">                        continue</span><br><span class="line">                    elif self.cal_matrix[begin_x, begin_y]+self.cal_matrix[x, begin_y] ==10:</span><br><span class="line">                        self.cal_matrix[x, begin_y] = 0</span><br><span class="line">                        self.cal_matrix[begin_x, begin_y] = 0</span><br><span class="line">                        if action:</span><br><span class="line">                            self.action(begin_x, x+1, begin_y, begin_y+1)</span><br><span class="line">                        End = False</span><br><span class="line">                        break</span><br><span class="line">                    else:</span><br><span class="line">                        break</span><br><span class="line">                # 搜索左边</span><br><span class="line">                for x in range(begin_x-1, -1, -1):</span><br><span class="line">                    if x &lt; 0:</span><br><span class="line">                        break</span><br><span class="line">                    if self.cal_matrix[x, begin_y] ==0:</span><br><span class="line">                        continue</span><br><span class="line">                    elif self.cal_matrix[begin_x, begin_y]+self.cal_matrix[x, begin_y] ==10:</span><br><span class="line">                        self.cal_matrix[x, begin_y] = 0</span><br><span class="line">                        self.cal_matrix[begin_x, begin_y] = 0</span><br><span class="line">                        if action:</span><br><span class="line">                            self.action(x, begin_x+1, begin_y, begin_y+1)</span><br><span class="line">                        End = False</span><br><span class="line">                        break</span><br><span class="line">                    else:</span><br><span class="line">                        break</span><br><span class="line">                # 搜索下面</span><br><span class="line">                for y in range(begin_y+1, 10):</span><br><span class="line">                    if self.cal_matrix[begin_x, y] ==0:</span><br><span class="line">                        continue</span><br><span class="line">                    elif self.cal_matrix[begin_x, begin_y]+self.cal_matrix[begin_x, y] ==10:</span><br><span class="line">                        self.cal_matrix[begin_x, begin_y] = 0</span><br><span class="line">                        self.cal_matrix[begin_x, y] = 0</span><br><span class="line">                        if action:</span><br><span class="line">                            self.action(begin_x, begin_x+1, begin_y, y+1)</span><br><span class="line">                        End = False</span><br><span class="line">                        break</span><br><span class="line">                    else:</span><br><span class="line">                        break</span><br><span class="line">                # 搜索上面</span><br><span class="line">                for y in range(begin_y-1, -1, -1):</span><br><span class="line">                    if y &lt; 0:</span><br><span class="line">                        break</span><br><span class="line">                    if self.cal_matrix[begin_x, y] ==0:</span><br><span class="line">                        continue</span><br><span class="line">                    elif self.cal_matrix[begin_x, begin_y]+self.cal_matrix[begin_x, y] ==10:</span><br><span class="line">                        self.cal_matrix[begin_x, begin_y] = 0</span><br><span class="line">                        self.cal_matrix[begin_x, y] = 0</span><br><span class="line">                        if action:</span><br><span class="line">                            self.action(begin_x, begin_x+1, y, begin_y+1)</span><br><span class="line">                        End = False</span><br><span class="line">                        break</span><br><span class="line">                    else:</span><br><span class="line">                        break</span><br><span class="line">        self.cal_two_y(End=End, action=action)</span><br></pre></td></tr></table></figure><p>运行脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">def run(self, continues=True):</span><br><span class="line">    self.thread = int(input(&#x27;OCR线程数（推荐3）：&#x27;))</span><br><span class="line">    self.thd = int(input(&#x27;请输入分数阈值（低于该值将自动放弃重开）：&#x27;))</span><br><span class="line">    print(f&quot;开始运行...&quot;)</span><br><span class="line">    self.trys = 0</span><br><span class="line">    while continues:</span><br><span class="line">        if self.trys &gt; 5:</span><br><span class="line">            print(&#x27;错误次数过多，终止运行&#x27;)</span><br><span class="line">            break</span><br><span class="line">        if not self.init_game():</span><br><span class="line">            self.restart()</span><br><span class="line">            continue</span><br><span class="line">        self.runtime += 1</span><br><span class="line">        print(&#x27;\t识别完毕，执行策略……&#x27;)</span><br><span class="line">        maxscore = 0</span><br><span class="line">        go = None</span><br><span class="line">        for strategy in [[0,1], [0,2], [1,1], [1,2], [2,1], [2,2]]:</span><br><span class="line">            self.run_strategy(strategy)</span><br><span class="line">            self.record(strategy)</span><br><span class="line">            if self.score &gt; maxscore:</span><br><span class="line">                maxscore = self.score</span><br><span class="line">                go = strategy</span><br><span class="line">            print(f&#x27;\t策略&#123;strategy&#125;分数:&#123;self.score&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">        self.record([0,0])</span><br><span class="line">        self.trys = 0</span><br><span class="line">        if maxscore &lt; self.thd:</span><br><span class="line">            print(f&#x27;\t均小于目标&#123;self.thd&#125;，放弃本次&#x27;)</span><br><span class="line">            self.restart()</span><br><span class="line">        else:</span><br><span class="line">            print(&#x27;\t执行最优策略&#x27;, go)</span><br><span class="line">            self.run_strategy(go, action=True)</span><br><span class="line">            self.capture_window(record=True)</span><br><span class="line">            time.sleep(100)</span><br><span class="line">        print(f&quot;游戏&#123;self.runtime&#125;结束, 开始下一次...&quot;)</span><br><span class="line">        # 点击再次挑战</span><br><span class="line">        x = self.window.left + (self.width // 2)</span><br><span class="line">        y = self.window.top + 620</span><br><span class="line">        pyautogui.click(x, y)</span><br><span class="line">        time.sleep(1)</span><br></pre></td></tr></table></figure><h2 id="recognizeNum-py"><a href="#recognizeNum-py" class="headerlink" title="recognizeNum.py"></a>recognizeNum.py</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">import pytesseract</span><br><span class="line">import os</span><br><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">from functools import partial</span><br><span class="line">from multiprocessing import Pool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">os.environ[&#x27;TESSDATA_PREFIX&#x27;] = r&#x27;&#x27;  # 替换为您的实际路径</span><br><span class="line">pytesseract.pytesseract.tesseract_cmd = r&#x27;&#x27;  # 替换为您的实际路径</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_score(img):</span><br><span class="line">    res = pytesseract.image_to_string(nmg, lang=&#x27;eng&#x27;, config=&#x27;--psm 6 --oem 3 -c tessedit_char_whitelist=0123456789&#x27;)</span><br><span class="line">    return int(res.strip())</span><br><span class="line"></span><br><span class="line">def get_intersection(h_line, v_line):</span><br><span class="line">    rho_h, theta_h = h_line</span><br><span class="line">    rho_v, theta_v = v_line</span><br><span class="line">    # 计算交点坐标</span><br><span class="line">    x, y = np.linalg.solve(np.array([[np.cos(theta_h), np.sin(theta_h)],</span><br><span class="line">                                     [np.cos(theta_v), np.sin(theta_v)]]).astype(float),</span><br><span class="line">                           np.array([rho_h, rho_v]).astype(float))</span><br><span class="line"></span><br><span class="line">    # 将交点坐标转为整数</span><br><span class="line">    x, y = int(x), int(y)</span><br><span class="line"></span><br><span class="line">    return x, y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def find_all_squares(image):</span><br><span class="line">    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    blurred = cv2.GaussianBlur(gray, (9, 9), 0)</span><br><span class="line">    sharpened = cv2.filter2D(blurred, -1, np.array([[0, -2, 0], [-2, 9, -2], [0, -2, 0]]))  # 强化锐化处理</span><br><span class="line">    edges = cv2.Canny(sharpened, 200, 500)</span><br><span class="line"></span><br><span class="line">    # 使用霍夫线变换检测直线</span><br><span class="line">    lines = cv2.HoughLines(edges, 1, np.pi / 180, threshold=175)</span><br><span class="line"></span><br><span class="line">    horizontal_lines = []</span><br><span class="line">    vertical_lines = []</span><br><span class="line"></span><br><span class="line">    if lines is not None:</span><br><span class="line">        for line in lines:</span><br><span class="line">            rho, theta = line[0]</span><br><span class="line">            a = np.cos(theta)</span><br><span class="line">            b = np.sin(theta)</span><br><span class="line">            x0 = a * rho</span><br><span class="line">            y0 = b * rho</span><br><span class="line"></span><br><span class="line">            # 转换为图像上的坐标</span><br><span class="line">            x1 = int(x0 + 1000 * (-b))</span><br><span class="line">            y1 = int(y0 + 1000 * (a))</span><br><span class="line">            x2 = int(x0 - 1000 * (-b))</span><br><span class="line">            y2 = int(y0 - 1000 * (a))</span><br><span class="line"></span><br><span class="line">            # 计算直线的角度</span><br><span class="line">            angle = np.degrees(np.arctan2(y2 - y1, x2 - x1))</span><br><span class="line"></span><br><span class="line">            # 根据角度进行分类，阈值可以根据实际情况调整</span><br><span class="line">            if 0 &lt;= abs(angle) &lt;= 2 or 178 &lt;= abs(angle) &lt;= 175:</span><br><span class="line">                horizontal_lines.append((rho, theta))</span><br><span class="line">            elif 88 &lt;= abs(angle) &lt;= 92:</span><br><span class="line">                vertical_lines.append((rho, theta))</span><br><span class="line"></span><br><span class="line">    # 对横线按照从上到下的顺序排序</span><br><span class="line">    horizontal_lines.sort(key=lambda line: line[0])</span><br><span class="line">    merged_horizontal_lines = []</span><br><span class="line">    merged_vertical_lines = []</span><br><span class="line">    merge_threshold = 3</span><br><span class="line">    previous_line = None</span><br><span class="line"></span><br><span class="line">    for current_line in horizontal_lines:</span><br><span class="line">        if previous_line is None or current_line[0] - previous_line[0] &gt; merge_threshold:</span><br><span class="line">            merged_horizontal_lines.append((current_line[0], current_line[1]))</span><br><span class="line">        previous_line = current_line</span><br><span class="line"></span><br><span class="line">    # 对竖线按照从左到右的顺序排序</span><br><span class="line">    vertical_lines.sort(key=lambda line: line[0])</span><br><span class="line">    previous_line = None</span><br><span class="line">    for current_line in vertical_lines:</span><br><span class="line">        if previous_line is not None and current_line[0] - previous_line[0] &lt;= merge_threshold:</span><br><span class="line">            # 合并相邻的水平线</span><br><span class="line">            merged_vertical_lines[-1] = (current_line[0], current_line[1])</span><br><span class="line">        else:</span><br><span class="line">            merged_vertical_lines.append((current_line[0], current_line[1]))</span><br><span class="line">        previous_line = current_line</span><br><span class="line"></span><br><span class="line">    found_squares = []</span><br><span class="line">    threshold = 3</span><br><span class="line"></span><br><span class="line">    # 寻找正方形</span><br><span class="line">    for i, h_line in enumerate(merged_horizontal_lines):</span><br><span class="line">        if i &gt;= len(merged_horizontal_lines)-1:</span><br><span class="line">            break</span><br><span class="line">        next_h_line = merged_horizontal_lines[i+1]</span><br><span class="line">        for j, v_line in enumerate(merged_vertical_lines):</span><br><span class="line">            if j &gt;= len(merged_vertical_lines) - 1:</span><br><span class="line">                break</span><br><span class="line">            next_v_line = merged_vertical_lines[j+1]</span><br><span class="line"></span><br><span class="line">            p_x1, p_y1 = get_intersection(h_line, v_line)</span><br><span class="line">            p_x2, p_y2 = get_intersection(next_h_line, next_v_line)</span><br><span class="line"></span><br><span class="line">            is_square = abs(abs(p_x2-p_x1) - abs(p_y2-p_y1)) &lt;= threshold and abs(p_x2-p_x1) &gt; 15</span><br><span class="line">            if is_square:</span><br><span class="line">                found_squares.append((p_x1, p_y1, p_x2, p_y2))</span><br><span class="line"></span><br><span class="line">    return found_squares</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def crop_region(image, square):</span><br><span class="line">    (x1, y1, x2, y2) = square</span><br><span class="line"></span><br><span class="line">    # 通过切片提取矩形区域</span><br><span class="line">    cropped_region = image[y1:y2, x1:x2]</span><br><span class="line"></span><br><span class="line">    return cropped_region</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def recognize_digit(image):</span><br><span class="line">    # 预处理图像，例如二值化处理</span><br><span class="line">    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    _, thresholded = cv2.threshold(gray_image, 127, 255, cv2.THRESH_BINARY)</span><br><span class="line"></span><br><span class="line">    # 使用 pytesseract 进行数字识别</span><br><span class="line">    digit = pytesseract.image_to_string(thresholded, lang=&#x27;eng&#x27;, config=&#x27;--psm 6 digits -c tessedit_char_whitelist=123456789&#x27;)  # --psm 6 表示按行识别</span><br><span class="line"></span><br><span class="line">    return digit.strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def recognize_matrix(image, thread):</span><br><span class="line">    squares = find_all_squares(image)</span><br><span class="line">    get_crop = partial(crop_region, image)</span><br><span class="line">    crop_images = list(map(get_crop, squares))</span><br><span class="line">    worker = Pool(thread)</span><br><span class="line">    recognized_digits = worker.map(recognize_digit, crop_images)</span><br><span class="line">    worker.close()</span><br><span class="line">    worker.join()</span><br><span class="line"></span><br><span class="line">    digits_matrix = []</span><br><span class="line">    for i in range(16):</span><br><span class="line">        digits_matrix.append((recognized_digits[i * 10:i * 10 + 10]))</span><br><span class="line"></span><br><span class="line">    return digits_matrix, squares</span><br></pre></td></tr></table></figure><h2 id="结尾的话"><a href="#结尾的话" class="headerlink" title="结尾的话"></a>结尾的话</h2><p>我最终用这个脚本打了135分，成功上榜。快在评论区晒晒你的分数吧~</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用mklink指令清理c盘</title>
      <link href="/2024/03/05/%E5%88%A9%E7%94%A8mklink%E6%8C%87%E4%BB%A4%E6%B8%85%E7%90%86c%E7%9B%98/"/>
      <url>/2024/03/05/%E5%88%A9%E7%94%A8mklink%E6%8C%87%E4%BB%A4%E6%B8%85%E7%90%86c%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h1 id="利用mklink指令清理c盘"><a href="#利用mklink指令清理c盘" class="headerlink" title="利用mklink指令清理c盘"></a>利用mklink指令清理c盘</h1><p>今天发现c盘满了，想清理一下，但是面对c盘中的文件又不敢轻举妄动。在不清楚文件作用的情况下，直接删除文件还是有风险的。那么有没有什么方法可以保留文件但是同时又把c盘中的空间清理出来呢？带着这个问题，我打开搜索引擎，果然发现了符合我需求的办法。</p><h2 id="mklink"><a href="#mklink" class="headerlink" title="mklink"></a>mklink</h2><p>没错，解决方案就是windows系统自带的指令——mklink，当我们在cmd输入<code>mklink /?</code>时，控制台会返回以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MKLINK [[/D] | [/H] | [/J]] Link Target</span><br><span class="line"></span><br><span class="line">        /D      创建目录符号链接。默认为文件</span><br><span class="line">                符号链接。</span><br><span class="line">        /H      创建硬链接而非符号链接。</span><br><span class="line">        /J      创建目录联接。</span><br><span class="line">        Link    指定新的符号链接名称。</span><br><span class="line">        Target  指定新链接引用的路径</span><br><span class="line">                (相对或绝对)。</span><br></pre></td></tr></table></figure><h2 id="windows链接类型"><a href="#windows链接类型" class="headerlink" title="windows链接类型"></a>windows链接类型</h2><p>为了看懂控制台给出的用法，我查询了windows的各个链接类型以及他们的区别</p><ol><li><p>快捷方式（Shortcut）：这个是最常见的链接类型了，我就不过多介绍</p></li><li><p>符号链接（Symbolic Link）：符号链接的路径可以是相对路径或绝对路径，可以是目录或文件，不占空间，可以跨本地磁盘，也可以跨网络磁盘（共享目录）。源目录移动、重命名或删除后，链接目录无效；链接目录删除，源目录不受影响；源目录里面的文件发生变化时（新增、修改、删除），链接目录里面的文件同步发生变化，反之，同样成立。</p></li><li><p>联接（Junction）：联接的路径只能是绝对路径，只能是目录，不占空间，只能跨本地磁盘。其他与符号链接差别不大。</p></li><li><p>硬链接（Hard Link）：硬链接的路径只能是绝对路径，占用空间和源文件一样且只能是文件。源文件删除后，链接文件无效；链接文件删除，源文件不受影响；只有将源文件和链接文件全部删除时，才会将文件真正的删除；当源文件内容发生变化时（修改），链接文件同步发生修改，反之，同样成立。</p></li></ol><h2 id="文件符号链接操作"><a href="#文件符号链接操作" class="headerlink" title="文件符号链接操作"></a>文件符号链接操作</h2><p>作为测试，我首先在E盘和F盘各创建一个test文件夹。并创建了<code>E:\test\text1.txt</code>和<code>F:\test\text2.txt</code>两个文件。然后运行指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mklink E:\test\text1.txt F:\test\text2.txt</span><br></pre></td></tr></table></figure><p>但是控制台给我一个报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当文件已存在时，无法创建该文件。</span><br></pre></td></tr></table></figure><p>于是我删除了<code>E:\test\text1.txt</code>，然后再次运行指令，控制台返回了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为 E:\test\text1.txt &lt;&lt;===&gt;&gt; F:\test\text2.txt 创建的符号链接</span><br></pre></td></tr></table></figure><p>此时<code>E:\test</code>下多出了一个叫<code>test1.txt</code>的文件，并且有一个类似超链接的标志，我在任意一个txt文件中修改内容，另一个则会同步改变。</p><h2 id="目录符号链接操作"><a href="#目录符号链接操作" class="headerlink" title="目录符号链接操作"></a>目录符号链接操作</h2><p>与文件符号链接一样，我们现在<code>F:\test</code>下创建了一个<code>target</code>的文件夹，然后运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mklink /d E:\test\link F:\test\target</span><br><span class="line">为 E:\test\link &lt;&lt;===&gt;&gt; F:\test\target 创建的符号链接</span><br></pre></td></tr></table></figure><p>现在<code>E:\test</code>又出现一个<code>link</code>文件夹，这个文件夹与target也是同步变化的，最重要的是，这个link文件夹是不占空间的，也就是说，我们可以利用这种方法将c盘的一些文件夹作为link符号链接到target上，以达到清理c盘空间的目的。</p><h2 id="目录联接操作"><a href="#目录联接操作" class="headerlink" title="目录联接操作"></a>目录联接操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mklink /j E:\test\link F:\test\target</span><br><span class="line">为 E:\test\link &lt;&lt;===&gt;&gt; F:\test\target 创建的联接</span><br></pre></td></tr></table></figure><p>在这个例子中与目录符号链接的效果差别不大</p><h2 id="硬链接操作"><a href="#硬链接操作" class="headerlink" title="硬链接操作"></a>硬链接操作</h2><p>我们将<code>E:\test\</code>清空并创建<code>F:\test\text2.txt</code>，执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mklink /h E:\test\text1.txt F:\test\text2.txt</span><br></pre></td></tr></table></figure><p>系统报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">系统无法将文件移到不同的磁盘驱动器。</span><br></pre></td></tr></table></figure><p>差点忘了硬链接不能跨本地磁盘</p><p>重新执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mklink /h F:\test\text3.txt F:\test\text2.txt</span><br></pre></td></tr></table></figure><p>运行成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为 F:\test\text3.txt &lt;&lt;===&gt;&gt; F:\test\text2.txt 创建了硬链接</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>今天通过清理c盘的契机了解到mklink指令，并深入了解（虽然也不是很深入）了windows系统上不同的链接类型。如果大家有什么想补充或者纠错的，请在评论区留言~</p>]]></content>
      
      
      <categories>
          
          <category> CMD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
            <tag> windows </tag>
            
            <tag> mklink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CREATE行为漏斗模型</title>
      <link href="/2024/03/04/CREATE%E8%A1%8C%E4%B8%BA%E6%BC%8F%E6%96%97%E6%A8%A1%E5%9E%8B/"/>
      <url>/2024/03/04/CREATE%E8%A1%8C%E4%B8%BA%E6%BC%8F%E6%96%97%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="CREATE行为漏斗模型"><a href="#CREATE行为漏斗模型" class="headerlink" title="CREATE行为漏斗模型"></a>CREATE行为漏斗模型</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>当我们构建UI和UX时，我们常常会分析用户的行为，但总是无从下手。CREATE漏斗模型（由Stephen Wendell设计）给我们提供了一个思路。CREATE分别是Cue（线索）、Reaction（反应）、Evaluation（评估）、Ability（能力）、Timing（时机）、Execute（行动）</p><p><img src="https://s2.loli.net/2024/03/04/UKq1cBVWb9YPHXG.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2024/03/04/UKq1cBVWb9YPHXG.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="CREATE行为漏斗"></p><h2 id="Cue"><a href="#Cue" class="headerlink" title="Cue"></a>Cue</h2><p>线索提示，即让用户意识到某个产品或功能的存在。吸引用户的注意力并在他的脑袋中留下印象是首要条件。</p><h2 id="Reaction"><a href="#Reaction" class="headerlink" title="Reaction"></a>Reaction</h2><p>当用户在某一时刻回想起某个产品时，他会有一个感受，可能是有趣的、优雅的，也可能是枯燥的、杂乱的。而这个感受也会对用户之后的行为造成影响。</p><h2 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h2><p>在用户产生了使用产品的想法后，他便会开始评估利弊，使用这个软件或功能是否会给他带来价值。如果使用的时间成本或金钱成本过高，大于他使用的预期，那么用户可能会放弃使用。</p><h2 id="Ability"><a href="#Ability" class="headerlink" title="Ability"></a>Ability</h2><p>也许在上一阶段，用户觉得使用这个软件是值的，那么现在还要看他是否具有发起行动的条件，比如此时用户的网络环境较差，无法打开网页，或不知道如何进入某功能页面，这些都会导致用户行动失败。</p><h2 id="Timing"><a href="#Timing" class="headerlink" title="Timing"></a>Timing</h2><p>最后是让用户的使用具有紧迫感，如果用户满足了上述条件，但一点都不急，那他有可能想着明天再用吧，然后就忘记了。很多软件推出一些限时活动，也是为了让用户觉得这个行动不能拖延。</p><h2 id="Execute"><a href="#Execute" class="headerlink" title="Execute"></a>Execute</h2><p>在前面5层漏斗的筛选下，用户此时终于决定行动起来。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过CREATE行为漏斗模型，我们能够更好地理解用户在与产品或功能互动时的心理过程。从最初的线索提示到最终的行动执行，每个阶段都是用户决策和行为的关键点。利用CREATE行为漏斗模型可以帮助我们更有效地吸引用户、提升产品价值，并促使他们采取行动。</p>]]></content>
      
      
      <categories>
          
          <category> 产品 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在vercel上部署hexo框架的博客</title>
      <link href="/2024/03/03/%E5%9C%A8vercel%E4%B8%8A%E9%83%A8%E7%BD%B2hexo%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%8F%8A%E5%85%B6%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2024/03/03/%E5%9C%A8vercel%E4%B8%8A%E9%83%A8%E7%BD%B2hexo%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%8F%8A%E5%85%B6%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="在vercel上部署hexo框架的博客"><a href="#在vercel上部署hexo框架的博客" class="headerlink" title="在vercel上部署hexo框架的博客"></a>在vercel上部署hexo框架的博客</h1><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><h3 id="安装Git、Node-js"><a href="#安装Git、Node-js" class="headerlink" title="安装Git、Node.js"></a>安装Git、Node.js</h3><p>Git的安装有多种方式，本文不展开讲。我使用的是<a href="https://desktop.github.com/">GitHub Desktop</a>，在windows和mac上均可下载使用。Node.js可以去<a href="https://nodejs.cn/download/">官网</a>下载相应安装包</p><h3 id="使用npm安装hexo"><a href="#使用npm安装hexo" class="headerlink" title="使用npm安装hexo"></a>使用npm安装hexo</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="创建网站"><a href="#创建网站" class="headerlink" title="创建网站"></a>创建网站</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder]</span><br></pre></td></tr></table></figure><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>也可以简写为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure><p>也可以简写为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>启动后默认地址为<a href="http://localhost:4000/">http://localhost:4000/</a></p><h2 id="vercel部署"><a href="#vercel部署" class="headerlink" title="vercel部署"></a>vercel部署</h2><p>首先将存有博客代码的github仓库导入<a href="https://vercel.com/">vercel</a>，在项目的setting中设置指令（如下图）</p><p><img src="https://s2.loli.net/2024/03/03/yFnlUOHpDwQYWER.png" class="lazyload placeholder" data-srcset="https://s2.loli.net/2024/03/03/yFnlUOHpDwQYWER.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="vercel部署hexo指令"></p><p>编辑完成并save后create新的deployment即可，此时可以从vercel给的临时链接访问博客</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>由于vercel提供的域名需要科学上网访问，平时使用起来不方便，因此我们需要给我们的博客一个域名和DNS解析服务。我选择了阿里云平台购买了域名。购买前需要先实名认证。</p><p>购买成功后，在vercel中setting-&gt;domains下添加购买的域名，并根据主机记录、记录类型和记录值在阿里云平台添加新的解析。</p><h2 id="关于图库"><a href="#关于图库" class="headerlink" title="关于图库"></a>关于图库</h2><p>刚开始我使用github存储图片，但国内访问速度感人，因此使用了<a href="https://sm.ms/">SM.MS</a>作为图床。为了更方便地管理图库，我下载了<a href="https://picgo.github.io/PicGo-Doc/zh/">PicGo</a>来上传图片。只需要在PicGo中添加token即可配置完成。</p><p>SM.MS的token在user-&gt;dashboard-&gt;API token中可以查看</p><h2 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h2><h3 id="创建新的文章"><a href="#创建新的文章" class="headerlink" title="创建新的文章"></a>创建新的文章</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><h3 id="发表草稿"><a href="#发表草稿" class="headerlink" title="发表草稿"></a>发表草稿</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><h3 id="更多指令"><a href="#更多指令" class="headerlink" title="更多指令"></a><a href="https://hexo.io/zh-cn/docs/commands">更多指令</a></h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> vercel </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
